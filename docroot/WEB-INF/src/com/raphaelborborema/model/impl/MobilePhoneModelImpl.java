/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.raphaelborborema.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.raphaelborborema.model.MobilePhone;
import com.raphaelborborema.model.MobilePhoneModel;
import com.raphaelborborema.model.MobilePhoneSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MobilePhone service. Represents a row in the &quot;models_MobilePhone&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.raphaelborborema.model.MobilePhoneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MobilePhoneImpl}.
 * </p>
 *
 * @author raphaelborborema
 * @see MobilePhoneImpl
 * @see com.raphaelborborema.model.MobilePhone
 * @see com.raphaelborborema.model.MobilePhoneModel
 * @generated
 */
@JSON(strict = true)
public class MobilePhoneModelImpl extends BaseModelImpl<MobilePhone>
	implements MobilePhoneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mobile phone model instance should use the {@link com.raphaelborborema.model.MobilePhone} interface instead.
	 */
	public static final String TABLE_NAME = "models_MobilePhone";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "brand", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "releaseDate", Types.TIMESTAMP },
			{ "price", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table models_MobilePhone (id_ LONG not null primary key,name VARCHAR(75) null,brand VARCHAR(75) null,description VARCHAR(255) null,releaseDate DATE null,price DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table models_MobilePhone";
	public static final String ORDER_BY_JPQL = " ORDER BY mobilePhone.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY models_MobilePhone.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.raphaelborborema.model.MobilePhone"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.raphaelborborema.model.MobilePhone"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.raphaelborborema.model.MobilePhone"),
			true);
	public static long NAME_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MobilePhone toModel(MobilePhoneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MobilePhone model = new MobilePhoneImpl();

		model.setId(soapModel.getId());
		model.setName(soapModel.getName());
		model.setBrand(soapModel.getBrand());
		model.setDescription(soapModel.getDescription());
		model.setReleaseDate(soapModel.getReleaseDate());
		model.setPrice(soapModel.getPrice());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MobilePhone> toModels(MobilePhoneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MobilePhone> models = new ArrayList<MobilePhone>(soapModels.length);

		for (MobilePhoneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.raphaelborborema.model.MobilePhone"));

	public MobilePhoneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MobilePhone.class;
	}

	@Override
	public String getModelClassName() {
		return MobilePhone.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("name", getName());
		attributes.put("brand", getBrand());
		attributes.put("description", getDescription());
		attributes.put("releaseDate", getReleaseDate());
		attributes.put("price", getPrice());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String brand = (String)attributes.get("brand");

		if (brand != null) {
			setBrand(brand);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date releaseDate = (Date)attributes.get("releaseDate");

		if (releaseDate != null) {
			setReleaseDate(releaseDate);
		}

		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getBrand() {
		if (_brand == null) {
			return StringPool.BLANK;
		}
		else {
			return _brand;
		}
	}

	@Override
	public void setBrand(String brand) {
		_brand = brand;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Date getReleaseDate() {
		return _releaseDate;
	}

	@Override
	public void setReleaseDate(Date releaseDate) {
		_releaseDate = releaseDate;
	}

	@JSON
	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MobilePhone.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MobilePhone toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MobilePhone)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MobilePhoneImpl mobilePhoneImpl = new MobilePhoneImpl();

		mobilePhoneImpl.setId(getId());
		mobilePhoneImpl.setName(getName());
		mobilePhoneImpl.setBrand(getBrand());
		mobilePhoneImpl.setDescription(getDescription());
		mobilePhoneImpl.setReleaseDate(getReleaseDate());
		mobilePhoneImpl.setPrice(getPrice());

		mobilePhoneImpl.resetOriginalValues();

		return mobilePhoneImpl;
	}

	@Override
	public int compareTo(MobilePhone mobilePhone) {
		int value = 0;

		if (getId() < mobilePhone.getId()) {
			value = -1;
		}
		else if (getId() > mobilePhone.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MobilePhone)) {
			return false;
		}

		MobilePhone mobilePhone = (MobilePhone)obj;

		long primaryKey = mobilePhone.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MobilePhoneModelImpl mobilePhoneModelImpl = this;

		mobilePhoneModelImpl._originalName = mobilePhoneModelImpl._name;

		mobilePhoneModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MobilePhone> toCacheModel() {
		MobilePhoneCacheModel mobilePhoneCacheModel = new MobilePhoneCacheModel();

		mobilePhoneCacheModel.id = getId();

		mobilePhoneCacheModel.name = getName();

		String name = mobilePhoneCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			mobilePhoneCacheModel.name = null;
		}

		mobilePhoneCacheModel.brand = getBrand();

		String brand = mobilePhoneCacheModel.brand;

		if ((brand != null) && (brand.length() == 0)) {
			mobilePhoneCacheModel.brand = null;
		}

		mobilePhoneCacheModel.description = getDescription();

		String description = mobilePhoneCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			mobilePhoneCacheModel.description = null;
		}

		Date releaseDate = getReleaseDate();

		if (releaseDate != null) {
			mobilePhoneCacheModel.releaseDate = releaseDate.getTime();
		}
		else {
			mobilePhoneCacheModel.releaseDate = Long.MIN_VALUE;
		}

		mobilePhoneCacheModel.price = getPrice();

		return mobilePhoneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", brand=");
		sb.append(getBrand());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", releaseDate=");
		sb.append(getReleaseDate());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.raphaelborborema.model.MobilePhone");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brand</column-name><column-value><![CDATA[");
		sb.append(getBrand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>releaseDate</column-name><column-value><![CDATA[");
		sb.append(getReleaseDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MobilePhone.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MobilePhone.class
		};
	private long _id;
	private String _name;
	private String _originalName;
	private String _brand;
	private String _description;
	private Date _releaseDate;
	private double _price;
	private long _columnBitmask;
	private MobilePhone _escapedModel;
}